@use "sass:map";
@use "sass:meta";
@use "../variables" as *;
@use "../functions" as *;

/// Media Query mixin
///
/// @param {String | Null} $from [null] - One of $mq-breakpoints
/// @param {String | Null} $until [null] - One of $mq-breakpoints
/// @param {String | Null} $and [null] - Additional media query parameters
///
/// @example sass
///   .foo {
///     @include mq(s) {
///       color: red;
///     }
///     @include mq($until: s or null, s) {
///       color: blue;
///     }
///     @include mq(s, m) {
///       color: green;
///     }
///     @include mq($until: 750px, $and: "(orientation: landscape)") {
///       color: teal;
///     }
///   }
@mixin mq($from: null, $to: null, $and: null) {
  $from: _get-pixel-formatted-width($from);
  $to: _get-pixel-formatted-width($to);
  $media-query-string: "";

  @if $from != 0 and $to != 0 {
    $media-query-string: "(#{$from} <= width < #{$to})";
  } @else if $from != 0 and $to == 0 {
    $media-query-string: "(width >= #{$from})";
  } @else if $from == 0 and $to != 0 {
    $media-query-string: "(width < #{$to})";
  }

  @if $and {
    $media-query-string: "#{$media-query-string} and #{$and}";
  }

  @media #{$media-query-string} {
    @content;
  }
}

/// Get pixel formatted width
///
/// @access private
/// @param {Number | List} $width
/// @returns {Number} - px formatted width
@function _get-pixel-formatted-width($width) {
  @if $width {
    @if meta.type-of($width) == number {
      @return strip-unit($width) * 1px;
    } @else {
      $breakpoint: map.get($breakpoints, $width);
      @if $breakpoint {
        @return strip-unit($breakpoint) * 1px;
      } @else {
        @return 0;
      }
    }
  } @else {
    @return 0;
  }
}
